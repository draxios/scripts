Azure DevOps provides a way to securely manage your secrets through variable groups. You can then link these variable groups to your YAML pipeline and make them available as environment variables for your script.

Hereâ€™s a step-by-step guide:

1. **Create a Variable Group in Azure DevOps**:
   - Go to `Pipelines` > `Library`.
   - Click on `+ Variable group`.
   - Provide a name for the group.
   - Add your desired variables and their values. For secrets, toggle the lock icon to keep them secure.
   - Save the group.

2. **Reference the Variable Group in Your YAML Pipeline**:
   ```yaml
   variables:
     - group: YourVariableGroupName
   ```

3. **Create a Task to Set Environment Variables**:
   
   After referencing the variable group, you can access those variables in your tasks. To make them available as environment variables for your Python script, you can use a script task:

   ```yaml
   steps:
   - script: |
       echo "##vso[task.setvariable variable=YOUR_ENV_VAR_NAME]$(YourVariableFromGroup)"
     displayName: 'Set environment variables'
   ```

   Replace `YOUR_ENV_VAR_NAME` with the name you want to use for your environment variable (as will be seen by your Python script) and `YourVariableFromGroup` with the name of the variable as defined in the variable group.

   Using the `echo "##vso[task.setvariable ...]` syntax, you can set the environment variable for subsequent tasks in the job.

4. **Run Your Python Script**:
   After setting the environment variables, you can run your Python script:

   ```yaml
   - script: python your_script.py
     displayName: 'Run Python Script'
   ```

   Within your Python script, you can then access the environment variable using:

   ```python
   import os
   value = os.environ['YOUR_ENV_VAR_NAME']
   ```

5. **Scheduled Trigger**:
   
   Since you mentioned you want this to run on a schedule, you can add a scheduled trigger in your YAML pipeline:

   ```yaml
   schedules:
   - cron: "0 0 * * *"
     displayName: Daily midnight build
     branches:
       include:
       - main
     always: true
   ```

   This example runs the pipeline daily at midnight.

Remember to ensure that your pipeline has the necessary permissions to access the variable group.
