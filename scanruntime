pipeline (REST):

trigger: none # Manual trigger

pool:
  vmImage: 'windows-latest'

variables:
  - group: SecretsGroup

jobs:
- job: ScanRepos
  steps:
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        # PowerShell script from above here
      arguments: '-organizationUrl https://dev.azure.com/YourOrganization -projectName YourProjectName -patToken $(PAT)'


script:

param(
    [string]$organizationUrl,
    [string]$projectName,
    [string]$patToken
)

# Base64 encode the PAT for authentication
$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$($patToken)"))

function Invoke-AzureDevOpsApi {
    param(
        [string]$url
    )

    $response = Invoke-RestMethod -Uri $url -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)} -Method Get
    return $response
}

# Get all repositories for the project
$reposUrl = "$organizationUrl/$projectName/_apis/git/repositories?api-version=6.0"
$repos = Invoke-AzureDevOpsApi -url $reposUrl

foreach ($repo in $repos.value) {
    # Clone repo to a temporary folder
    $tmpDir = New-TemporaryDirectory
    git clone $repo.remoteUrl $tmpDir

    # Navigate to the directory
    Set-Location $tmpDir

    # Check for .csproj files (both .NET Framework and .NET Core use this)
    $csprojFiles = Get-ChildItem -Recurse -Filter *.csproj

    foreach ($csprojFile in $csprojFiles) {
        $content = Get-Content $csprojFile.FullName

        # Detect .NET version
        if ($content -like "*<TargetFrameworkVersion>*") {
            $version = $content | Select-String -Pattern "<TargetFrameworkVersion>(.*)</TargetFrameworkVersion>" | ForEach-Object { $_.Matches.Groups[1].Value }
            Write-Output "Repo: $($repo.name), File: $($csprojFile.FullName), Detected .NET Framework Version: $version"
        } elseif ($content -like "*<TargetFramework>*") {
            $version = $content | Select-String -Pattern "<TargetFramework>(.*)</TargetFramework>" | ForEach-Object { $_.Matches.Groups[1].Value }
            Write-Output "Repo: $($repo.name), File: $($csprojFile.FullName), Detected .NET Version: $version"
        }
    }

    # Cleanup
    Remove-Item $tmpDir -Recurse
}

