trigger:
- main
- feature/*

pool:
  vmImage: 'windows-latest'

variables:
  # Define feed URL and view variables. Replace `YourFeedName` with your actual feed name.
  FEED_URL: 'https://pkgs.dev.azure.com/YourOrganization/_packaging/YourFeedName/nuget/v3/index.json'
  DEV_FEED_VIEW: '@Prerelease'
  PROD_FEED_VIEW: '@Release'

steps:
- script: |
    echo 'Restoring packages...'
    if [ "$(Build.SourceBranch)" == "refs/heads/main" ]; then
      dotnet restore YourSolution.sln --source $(FEED_URL)$(PROD_FEED_VIEW)
    else
      dotnet restore YourSolution.sln --source $(FEED_URL)$(DEV_FEED_VIEW)
    fi
  displayName: 'Restore Packages Based on Branch'




trigger: none

pool:
  vmImage: 'windows-latest'

parameters:
- name: packageUrl
  type: string
  default: ''
  displayName: 'URL of the NuGet package to add'

steps:
- task: DownloadPackage@1
  inputs:
    packageType: 'nuget'
    downloadPath: '$(Build.ArtifactStagingDirectory)'
    feed: 'MyFeed'
    view: '@Prerelease'
    packageVersion: '*'
    downloadPackageName: '$(packageUrl)'

- task: NuGetCommand@2
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'MyFeed'



trigger: none

pool:
  vmImage: 'windows-latest'

parameters:
- name: packageName
  type: string
  displayName: 'Name of the package to promote'
- name: packageVersion
  type: string
  displayName: 'Version of the package to promote'

steps:
- pwsh: |
    az artifacts universal promote --organization $(System.TeamFoundationCollectionUri) --feed MyFeed --name ${{ parameters.packageName }} --version ${{ parameters.packageVersion }} --to-view @Release
  displayName: 'Promote Package to Release'






trigger: none

pool:
  vmImage: 'windows-latest'

parameters:
- name: packageName
  type: string
  displayName: 'NuGet Package Name'
- name: packageVersion
  type: string
  displayName: 'NuGet Package Version'

steps:
- powershell: |
    # Download nuget.exe if not already available
    $nugetPath = "nuget.exe"
    if (-not (Test-Path $nugetPath)) {
      Invoke-WebRequest -Uri "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe" -OutFile $nugetPath
    }
    
    # Define package name and version
    $packageName = "${{ parameters.packageName }}"
    $packageVersion = "${{ parameters.packageVersion }}"
    $packageFileName = "$packageName.$packageVersion.nupkg"
    
    # Download the package from nuget.org
    & $nugetPath install $packageName -Version $packageVersion -OutputDirectory $(Build.ArtifactStagingDirectory)
    
    # Push the package to Azure DevOps feed
    $feedUrl = "https://pkgs.dev.azure.com/YourOrganization/_packaging/YourFeed/nuget/v3/index.json"
    $patToken = "your-pat-token" # Ensure this is securely managed
    $encodedPat = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(":$patToken"))
    & $nugetPath push "$(Build.ArtifactStagingDirectory)\$packageName.$packageVersion\*.nupkg" -Source $feedUrl -ApiKey az -ConfigFile .\nuget.config
    
  displayName: 'Download and Push NuGet Package'
  env:
    # Use environment variable to securely pass the PAT token
    NUGET_CREDENTIALPROVIDER_MSAL_ENABLED: true
    VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: '{"endpointCredentials": [{"endpoint":"$(feedUrl)", "username":"", "password":"$(patToken)"}]}'


trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

parameters:
- name: packageName
  displayName: Package Name
  type: string
- name: packageVersion
  displayName: Package Version
  type: string

jobs:
- job: MigratePackage
  displayName: 'Migrate Package'
  steps:
  - task: PowerShell@2
    displayName: 'Check Package Existence'
    inputs:
      targetType: 'inline'
      script: |
        # Example script to check if package exists in source feed
        # This will need to be replaced with actual logic to check package existence
        echo "Checking if package ${{ parameters.packageName }} exists in source feed"
        # Fake condition for demonstration; replace with actual check
        if ($true) {
            echo "##vso[task.setvariable variable=packageExists;isOutput=true]true"
        } else {
            echo "##vso[task.setvariable variable=packageExists;isOutput=false]false"
        }
    name: checkPackage

  - task: PowerShell@2
    displayName: 'Download and Upload Package'
    condition: and(succeeded(), eq(dependencies.MigratePackage.outputs['checkPackage.packageExists'], 'true'))
    inputs:
      targetType: 'inline'
      script: |
        # Download package from source feed
        echo "Downloading package ${{ parameters.packageName }} version ${{ parameters.packageVersion }}"
        # Example command; replace with actual download logic
        # Upload package to target feed as @Prerelease
        echo "Uploading package ${{ parameters.packageName }} to target feed as @Prerelease"
        # Example command; replace with actual upload logic including setting the view to @Prerelease

