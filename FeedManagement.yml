trigger:
- main
- feature/*

pool:
  vmImage: 'windows-latest'

variables:
  # Define feed URL and view variables. Replace `YourFeedName` with your actual feed name.
  FEED_URL: 'https://pkgs.dev.azure.com/YourOrganization/_packaging/YourFeedName/nuget/v3/index.json'
  DEV_FEED_VIEW: '@Prerelease'
  PROD_FEED_VIEW: '@Release'

steps:
- script: |
    echo 'Restoring packages...'
    if [ "$(Build.SourceBranch)" == "refs/heads/main" ]; then
      dotnet restore YourSolution.sln --source $(FEED_URL)$(PROD_FEED_VIEW)
    else
      dotnet restore YourSolution.sln --source $(FEED_URL)$(DEV_FEED_VIEW)
    fi
  displayName: 'Restore Packages Based on Branch'




trigger: none

pool:
  vmImage: 'windows-latest'

parameters:
- name: packageUrl
  type: string
  default: ''
  displayName: 'URL of the NuGet package to add'

steps:
- task: DownloadPackage@1
  inputs:
    packageType: 'nuget'
    downloadPath: '$(Build.ArtifactStagingDirectory)'
    feed: 'MyFeed'
    view: '@Prerelease'
    packageVersion: '*'
    downloadPackageName: '$(packageUrl)'

- task: NuGetCommand@2
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'MyFeed'



trigger: none

pool:
  vmImage: 'windows-latest'

parameters:
- name: packageName
  type: string
  displayName: 'Name of the package to promote'
- name: packageVersion
  type: string
  displayName: 'Version of the package to promote'

steps:
- pwsh: |
    az artifacts universal promote --organization $(System.TeamFoundationCollectionUri) --feed MyFeed --name ${{ parameters.packageName }} --version ${{ parameters.packageVersion }} --to-view @Release
  displayName: 'Promote Package to Release'






trigger: none

pool:
  vmImage: 'windows-latest'

parameters:
- name: packageName
  type: string
  displayName: 'NuGet Package Name'
- name: packageVersion
  type: string
  displayName: 'NuGet Package Version'

steps:
- powershell: |
    # Download nuget.exe if not already available
    $nugetPath = "nuget.exe"
    if (-not (Test-Path $nugetPath)) {
      Invoke-WebRequest -Uri "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe" -OutFile $nugetPath
    }
    
    # Define package name and version
    $packageName = "${{ parameters.packageName }}"
    $packageVersion = "${{ parameters.packageVersion }}"
    $packageFileName = "$packageName.$packageVersion.nupkg"
    
    # Download the package from nuget.org
    & $nugetPath install $packageName -Version $packageVersion -OutputDirectory $(Build.ArtifactStagingDirectory)
    
    # Push the package to Azure DevOps feed
    $feedUrl = "https://pkgs.dev.azure.com/YourOrganization/_packaging/YourFeed/nuget/v3/index.json"
    $patToken = "your-pat-token" # Ensure this is securely managed
    $encodedPat = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(":$patToken"))
    & $nugetPath push "$(Build.ArtifactStagingDirectory)\$packageName.$packageVersion\*.nupkg" -Source $feedUrl -ApiKey az -ConfigFile .\nuget.config
    
  displayName: 'Download and Push NuGet Package'
  env:
    # Use environment variable to securely pass the PAT token
    NUGET_CREDENTIALPROVIDER_MSAL_ENABLED: true
    VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: '{"endpointCredentials": [{"endpoint":"$(feedUrl)", "username":"", "password":"$(patToken)"}]}'




trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

variables:
  nugetPath: 'nuget'
  nugetConfigPath: '$(Build.SourcesDirectory)/NuGet.config'

parameters:
- name: packageName
  displayName: Package Name
  type: string
- name: packageVersion
  displayName: Package Version
  type: string
- name: sourceFeedUrl
  displayName: Source Feed URL
  type: string
- name: targetFeed
  displayName: Target Feed Name
  type: string
- name: targetFeedUrl
  displayName: Target Feed URL
  type: string
- name: adoOrganization
  displayName: Azure DevOps Organization
  type: string
- name: adoProject
  displayName: Azure DevOps Project
  type: string

jobs:
- job: MigrateNuGetPackage
  displayName: 'Migrate NuGet Package'
  steps:
  - task: NuGetToolInstaller@1
    displayName: 'Install NuGet'

  - task: Bash@3
    displayName: 'Configure NuGet Feeds'
    inputs:
      targetType: 'inline'
      script: |
        # Configure NuGet to use the source and target feeds with authentication
        echo "Configuring NuGet feeds"
        nuget sources Add -Name "SourceFeed" -Source ${{ parameters.sourceFeedUrl }} -Username "PAT" -Password $(adoPat) -ConfigFile ${{ variables.nugetConfigPath }}
        nuget sources Add -Name "TargetFeed" -Source ${{ parameters.targetFeedUrl }} -Username "PAT" -Password $(adoPat) -ConfigFile ${{ variables.nugetConfigPath }}

  - task: NuGetCommand@2
    displayName: 'Download Package from Source Feed'
    inputs:
      command: 'custom'
      arguments: 'install ${{ parameters.packageName }} -Version ${{ parameters.packageVersion }} -OutputDirectory $(Build.ArtifactStagingDirectory) -ConfigFile ${{ variables.nugetConfigPath }}'

  - task: NuGetCommand@2
    displayName: 'Upload Package to Target Feed'
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
      nuGetFeedType: 'internal'
      publishVstsFeed: ${{ parameters.targetFeed }}
      nuGetApiKey: 'VSTS'

  - task: Bash@3
    displayName: 'Tag Package with @Prerelease View'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
      targetType: 'inline'
      script: |
        echo "Tagging package with @Prerelease view"
        PAT_TOKEN=$(adoPat)
        ORG='${{ parameters.adoOrganization }}'
        PROJECT='${{ parameters.adoProject }}'
        FEED='${{ parameters.targetFeed }}'
        PACKAGE_NAME='${{ parameters.packageName }}'
        PACKAGE_VERSION='${{ parameters.packageVersion }}'
        VIEW_NAME='@Prerelease'
        
        # Construct the URL for the Azure DevOps REST API call
        URL="https://feeds.dev.azure.com/$ORG/$PROJECT/_apis/packaging/Feeds/$FEED/packages?packageName=$PACKAGE_NAME&packageVersion=$PACKAGE_VERSION&api-version=6.0-preview.1"
        
        # Use cURL to call the Azure DevOps REST API to add the package to the @Prerelease view
        RESPONSE=$(curl -X PATCH $URL -H "Authorization: Bearer $PAT_TOKEN" -H "Content-Type: application/json" -d "{ \"views\": { \"op\": \"add\", \"value\": \"$VIEW_NAME\" } }")
        
        echo "Response from Azure DevOps REST API: $RESPONSE"
        


trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

variables:
  nugetConfigPath: '$(Build.SourcesDirectory)/NuGet.config'

parameters:
- name: packageName
  displayName: Package Name
  type: string
- name: packageVersion
  displayName: Package Version
  type: string
- name: sourceFeedUrl
  displayName: Source Feed URL
  type: string
- name: targetFeedUrl
  displayName: Target Feed URL
  type: string
- name: adoOrganization
  displayName: Azure DevOps Organization
  type: string
- name: adoProject
  displayName: Azure DevOps Project
  type: string
- name: adoPat
  displayName: Azure DevOps PAT
  type: string

jobs:
- job: MigrateNuGetPackage
  displayName: 'Migrate NuGet Package'
  steps:
  - task: Bash@3
    displayName: 'Configure NuGet Source'
    inputs:
      targetType: 'inline'
      script: |
        # Creating NuGet.config for authentication
        cat > ${{ variables.nugetConfigPath }} <<EOL
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <packageSources>
            <add key="sourceFeed" value="${{ parameters.sourceFeedUrl }}" />
            <add key="targetFeed" value="${{ parameters.targetFeedUrl }}" />
          </packageSources>
          <packageSourceCredentials>
            <sourceFeed>
              <add key="Username" value="any" />
              <add key="ClearTextPassword" value="${{ parameters.adoPat }}" />
            </sourceFeed>
            <targetFeed>
              <add key="Username" value="any" />
              <add key="ClearTextPassword" value="${{ parameters.adoPat }}" />
            </targetFeed>
          </packageSourceCredentials>
        </configuration>
        EOL

        echo "NuGet source configured"

  - task: Bash@3
    displayName: 'Download and Push NuGet Package'
    inputs:
      targetType: 'inline'
      script: |
        # Download the package using NuGet
        nuget install ${{ parameters.packageName }} -Version ${{ parameters.packageVersion }} -Source ${{ parameters.sourceFeedUrl }} -ConfigFile ${{ variables.nugetConfigPath }} -OutputDirectory $(Build.ArtifactStagingDirectory)

        # Find the downloaded package file
        packageFile=$(find $(Build.ArtifactStagingDirectory) -name "*.nupkg" | head -n 1)
        if [[ -z "$packageFile" ]]; then
          echo "Package not found, stopping the pipeline."
          exit 1
        fi

        # Push the package using NuGet
        nuget push "$packageFile" -Source ${{ parameters.targetFeedUrl }} -ApiKey az -ConfigFile ${{ variables.nugetConfigPath }}

  - task: Bash@3
    displayName: 'Tag Package with @Prerelease View'
    inputs:
      targetType: 'inline'
      script: |
        # Tagging the package using Azure DevOps REST API
        organization="${{ parameters.adoOrganization }}"
        project="${{ parameters.adoProject }}"
        feedName="${{ parameters.targetFeedUrl }}"
        packageName="${{ parameters.packageName }}"
        packageVersion="${{ parameters.packageVersion }}"
        patToken="${{ parameters.adoPat }}"
        viewName="@Prerelease"

        encodedPat=$(echo -n ":$patToken" | base64)

        url="https://feeds.dev.azure.com/$organization/$project/_apis/packaging/Feeds/$feedName/packages?packageName=$packageName&packageVersion=$packageVersion&api-version=6.0-preview.1"
        data="{\"views\": {\"op\": \"add\", \"value\": \"$viewName\"}}"

        response=$(curl -X PATCH "$url" -H "Authorization: Basic $encodedPat" -H "Content-Type: application/json" -d "$data")

        echo "Package tagging response: $response"
        



trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

variables:
  adoOrganization: '<YourAzureDevOpsOrganization>' # Replace with your Azure DevOps organization name
  adoProject: '<YourProjectName>' # Replace with your Azure DevOps project name
  adoFeed: '<YourFeedName>' # Replace with your Azure Artifacts feed name
  adoPat: $(AdoPat) # Ensure this is stored securely in your pipeline variables as a secret

parameters:
- name: packageName
  displayName: Package Name
  type: string
- name: packageVersion
  displayName: Package Version
  type: string

jobs:
- job: PromoteNuGetPackage
  displayName: 'Promote NuGet Package to @Release View'
  steps:
  - task: Bash@3
    displayName: 'Promote Package'
    inputs:
      targetType: 'inline'
      script: |
        # Encode the PAT token for authentication
        ENCODED_PAT=$(echo -n ":${{ variables.adoPat }}" | base64)

        # Define API URL
        API_URL="https://feeds.dev.azure.com/${{ variables.adoOrganization }}/${{ variables.adoProject }}/_apis/packaging/Feeds/${{ variables.adoFeed }}/PackagesBatch?api-version=6.0-preview.1"

        # Construct the JSON payload
        JSON_PAYLOAD='{
          "data": {
            "viewId": "@Release",
            "packages": [{
              "id": "${{ parameters.packageName }}",
              "version": "${{ parameters.packageVersion }}"
            }]
          },
          "operation": 0
        }'

        # Make the REST API call to promote the package to @Release view
        RESPONSE=$(curl -X POST "$API_URL" \
          -H "Authorization: Basic $ENCODED_PAT" \
          -H "Content-Type: application/json" \
          -d "$JSON_PAYLOAD")

        echo "API Response: $RESPONSE"
        



steps:
- script: |
    echo ##vso[task.setvariable variable=NUGET_CREDENTIALPROVIDER_SESSIONTOKEN;issecret=true]$(System.AccessToken)
  displayName: 'Set NuGet Auth Token'

- script: |
    nuget restore YourSolution.sln -Source "https://pkgs.dev.azure.com/your_organization/_packaging/your_feed/nuget/v3/index.json"
  displayName: 'Restore NuGet packages'
